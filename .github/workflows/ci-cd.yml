name: Motion Viewer CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dev/viewer/**'
      - 'dev/server/**'
      - 'dev/tests/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'dev/viewer/**'
      - 'dev/server/**'
      - 'dev/tests/**'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'dev/tests/package-lock.json'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install test dependencies
      working-directory: dev/tests
      run: |
        npm ci
        npx playwright install --with-deps
        
    - name: Start test server
      working-directory: dev/server
      run: |
        npm ci
        npm run start:test &
        # Wait for server to be ready
        npx wait-on http://localhost:3001/health --timeout 30000
        
    - name: Run unit tests
      working-directory: dev/tests
      run: npm run test:unit
      
    - name: Run integration tests
      working-directory: dev/tests
      run: npm run test:integration
      
    - name: Run visual regression tests
      working-directory: dev/tests
      run: |
        npm run test:visual
        
    - name: Run performance tests
      working-directory: dev/tests
      run: npm run test:performance
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          dev/tests/reports/
          dev/tests/screenshots/
          dev/tests/test-results/
        retention-days: 30
        
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: dev/tests/coverage/
        retention-days: 30

  visual-diff:
    name: Visual Regression Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'dev/tests/package-lock.json'
        
    - name: Install dependencies
      working-directory: dev/tests
      run: |
        npm ci
        npx playwright install --with-deps
        
    - name: Download baseline screenshots
      uses: actions/download-artifact@v4
      with:
        name: baseline-screenshots
        path: dev/tests/screenshots/baseline/
      continue-on-error: true
      
    - name: Run visual comparison
      working-directory: dev/tests
      run: |
        npm run test:visual:compare
        
    - name: Generate visual diff report
      working-directory: dev/tests
      run: |
        npm run test:visual:report
        
    - name: Upload visual diff report
      uses: actions/upload-artifact@v4
      with:
        name: visual-diff-report
        path: dev/tests/reports/visual-diff/
        retention-days: 30
        
    - name: Comment PR with visual changes
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const reportPath = 'dev/tests/reports/visual-diff/summary.json';
          if (fs.existsSync(reportPath)) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            if (report.changes > 0) {
              const body = `## üñºÔ∏è Visual Changes Detected
              
              This PR introduces visual changes to the Motion Viewer:
              
              - **Changed screens**: ${report.changes}
              - **New screens**: ${report.new}
              - **Removed screens**: ${report.removed}
              
              üìä [View detailed visual diff report](${context.payload.pull_request.html_url}/checks)
              
              Please review the visual changes carefully before merging.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          }

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'dev/viewer/package-lock.json'
        
    - name: Build viewer
      working-directory: dev/viewer
      run: |
        npm ci
        npm run build:staging
        
    - name: Build server
      working-directory: dev/server
      run: |
        npm ci
        npm run build
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: rsync, docker push, AWS deployment, etc.
        
    - name: Run smoke tests
      working-directory: dev/tests
      run: |
        npm ci
        STAGING_URL=${{ secrets.STAGING_URL }} npm run test:smoke
        
    - name: Notify deployment
      if: success()
      run: |
        echo "‚úÖ Staging deployment successful"
        echo "üîó Staging URL: ${{ secrets.STAGING_URL }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'dev/viewer/package-lock.json'
        
    - name: Build viewer
      working-directory: dev/viewer
      run: |
        npm ci
        npm run build:production
        
    - name: Build server
      working-directory: dev/server
      run: |
        npm ci
        npm run build
        
    - name: Run security scan
      working-directory: dev
      run: |
        npm audit --audit-level moderate
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Run post-deployment tests
      working-directory: dev/tests
      run: |
        npm ci
        PRODUCTION_URL=${{ secrets.PRODUCTION_URL }} npm run test:smoke
        
    - name: Update baseline screenshots
      if: success()
      working-directory: dev/tests
      run: |
        npm run test:visual:update-baseline
        
    - name: Upload new baseline
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: baseline-screenshots
        path: dev/tests/screenshots/baseline/
        retention-days: 90
        
    - name: Notify deployment
      if: success()
      run: |
        echo "üöÄ Production deployment successful"
        echo "üîó Production URL: ${{ secrets.PRODUCTION_URL }}"

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      working-directory: dev/tests
      run: |
        npm ci
        npx playwright install --with-deps
        
    - name: Run Lighthouse audit
      working-directory: dev/tests
      run: |
        npm run test:lighthouse -- --url=${{ secrets.PRODUCTION_URL }}
        
    - name: Run performance benchmark
      working-directory: dev/tests
      run: |
        PRODUCTION_URL=${{ secrets.PRODUCTION_URL }} npm run test:performance:benchmark
        
    - name: Upload performance reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          dev/tests/reports/lighthouse/
          dev/tests/reports/performance/
        retention-days: 30
        
    - name: Check performance regression
      working-directory: dev/tests
      run: |
        npm run test:performance:compare
        
    - name: Comment performance results
      if: github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          const reportPath = 'dev/tests/reports/performance/summary.json';
          if (fs.existsSync(reportPath)) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            const body = `## ‚ö° Performance Report
            
            Latest performance metrics for the Motion Viewer:
            
            - **Lighthouse Score**: ${report.lighthouse.performance}/100
            - **FPS (60Hz target)**: ${report.fps.average} avg, ${report.fps.min} min
            - **Memory Usage**: ${report.memory.peak}MB peak
            - **Load Time**: ${report.loadTime}ms
            
            ${report.regression ? '‚ö†Ô∏è Performance regression detected!' : '‚úÖ Performance within acceptable range'}
            
            üìä [View detailed performance report](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
            
            // Create issue if performance regression detected
            if (report.regression) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® Performance Regression Detected - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['performance', 'regression', 'bug']
              });
            }
          }
